---
- name: Create {{ ec2_vpc_name }} VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ ec2_vpc_name }}"
    cidr_block: 172.31.0.0/16
    region: "{{ ec2_region }}"
  register: vpc

- name: Create subnet in VPC
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: 172.31.1.0/24
    region: "{{ ec2_region }}"
    tags:
      Name: "{{ ec2_vpc_name }}"
  register: subnet

- name: Create internet gateway for VPC {{ ec2_vpc_name }}
  community.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: "{{ ec2_vpc_name }}"
    state: present
    region: "{{ ec2_region }}"
  register: igw

- name: Set up public subnet route table
  community.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_region }}"
    tags:
      Name: "{{ ec2_vpc_name }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"

- name: set port lists for linux
  ansible.builtin.set_fact:
    port_list:
      - 80
      - 443
      - 22
  when: ec2_os_type == "linux"

- name: set port lists for Windows
  ansible.builtin.set_fact:
    port_list:
      - 80
      - 443
      - 3389
      - 5986
  when: ec2_os_type == "windows"

- name: expand port list with additional port
  ansible.builtin.set_fact:
    port_list: "{{ port_list + [ instance_additional_port ] }}"
  when: instance_additional_port is defined

- name: Create security group {{ instance_name }} (HTTP, HTTPS and SSH)
  amazon.aws.ec2_group:
    name: "{{ instance_name }}"
    description: HTTP, HTTPS and SSH
    state: present
    rules:
      - proto: tcp
        ports: "{{ port_list }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on ports 80, 443 & 22
    region: "{{ ec2_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: "{{ instance_name }}"
  when: ec2_os_type == "linux"

- name: Create security group {{ instance_name }} (HTTP, HTTPS, WinRM and RDP)
  amazon.aws.ec2_group:
    name: "{{ instance_name }}"
    description: HTTP, HTTPS, WinRM and RDP
    state: present
    rules:
      - proto: tcp
        ports: "{{ port_list }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on ports 80, 443, 3389 & 5986
    region: "{{ ec2_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: "{{ instance_name }}"
  when: ec2_os_type == "windows"

- name: check if ec2_key_pair is a file
  stat:
    path: "{{ ec2_key_pair }}"
  register: ec2_key_pair_stat
  when: ec2_key_pair is defined

- name: Import SSH Key from file
  amazon.aws.ec2_key:
    name: "{{ ec2_vpc_name }}"
    key_material: "{{ lookup('file', ec2_key_pair ) }}"
    region: "{{ ec2_region }}"
  when:
    - ec2_key_pair is defined
    - ec2_key_pair_stat.stat.exists | bool

- name: Import SSH Key from variable
  amazon.aws.ec2_key:
    name: "{{ ec2_vpc_name }}"
    key_material: "{{ ec2_key_pair }}"
    region: "{{ ec2_region }}"
  when:
    - ec2_key_pair is defined
    - not ec2_key_pair_stat.stat.exists | bool

- name: Find AMI with filter "{{ ec2_image_name }}"
  amazon.aws.ec2_ami_info:
    filters:
      name: "{{ ec2_image_name }}"
    region: "{{ ec2_region }}"
  register: ami_find
  when: not ec2_ami_id

- name: Create EC2 Linux instance {{ instance_name }} - this can take a minute
  community.aws.ec2_instance:
    image_id: "{{ ami_find.images[-1].image_id | default('') }}"
    instance_type: "{{ instance_flavor }}"
    security_group: "{{ instance_name }}"
    name: "{{ instance_name }}"
    key_name: "{{ ec2_vpc_name }}"
    region: "{{ ec2_region }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    network:
      assign_public_ip: true
    tags:
      Name: "{{ ec2_vpc_name }}"
    state: running
  register: linux_vm
  when: ec2_os_type == "linux"

- name: Create EC2 Windows instance {{ instance_name }} - this can take a minute
  community.aws.ec2_instance:
    image_id: "{{ ami_find.images[-1].image_id | default('') }}"
    instance_type: "{{ instance_flavor }}"
    security_group: "{{ instance_name }}"
    name: "{{ instance_name }}"
    key_name: "{{ ec2_vpc_name }}"
    region: "{{ ec2_region }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    network:
      assign_public_ip: true
    tags:
      Name: "{{ ec2_vpc_name }}"
    state: running
    user_data: |
      <powershell>
      start-transcript
      echo "Enable Ansible..."
      Invoke-WebRequest -Uri https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile ConfigureRemotingForAnsible.ps1
      powershell -ExecutionPolicy RemoteSigned .\ConfigureRemotingForAnsible.ps1
      echo "Create Ansible local user..."
      $pass = "{{ windows_admin_password }}" | ConvertTo-SecureString -AsPlainText -Force
      New-LocalUser "ansible" -Password $pass -FullName "Ansible Service Account"
      echo "Add Ansible local user to local admin group..."
      Add-LocalGroupMember -Group "Administrators" -Member "ansible"
      </powershell>
      <persist>true</persist>
  register: windows_vm
  when: ec2_os_type == "windows"

- name: store Linux VM facts
  ansible.builtin.set_fact:
    ec2: "{{ linux_vm }}"
  when: azure_os_type == "linux"

- name: store Windows VM facts
  ansible.builtin.set_fact:
    ec2: "{{ windows_vm }}"
  when: azure_os_type == "windows"

- name: Add host to an in_memory inventory
  ansible.builtin.add_host:
    name: "{{ instance_name }}"
    ansible_host: "{{ instance_name }}.{{ dns_suffix }}.ansible-labs.de"
    ansible_user: ec2-user
    groups:
      - "{{ instance_group | default ('all_hosts') }}"

- name: update DNS record
  include_role:
    name: nsupdate
  vars:
    ipaddress: "{{ ec2.instances[0].public_ip_address }}"
    shortname: "{{ instance_name }}"
    keyfile: "{{ dns_keyfile }}"
    suffix: "{{ dns_suffix }}"
    mode: update
  when: dns_update | bool
