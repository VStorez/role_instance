---
- name: Create {{ instance_name }} VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ instance_name }}"
    cidr_block: 172.31.0.0/16
    region: "{{ ec2_region }}"
  register: vpc

- name: Create subnet in VPC
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: 172.31.1.0/24
    region: "{{ ec2_region }}"
    tags:
      Name: "{{ instance_name }}"
  register: subnet

- name: Create internet gateway for VPC {{ instance_name }}
  community.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: "{{ instance_name }}"
    state: present
    region: "{{ ec2_region }}"
  register: igw

- name: Set up public subnet route table
  community.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_region }}"
    tags:
      Name: "{{ instance_name }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"

- name: Create security group {{ instance_name }} (HTTP, HTTPS and SSH)
  amazon.aws.ec2_group:
    name: "{{ instance_name }}"
    description: HTTP, HTTPS and SSH
    state: present
    rules:
    - proto: tcp
      ports:
        - 80
        - 443
        - 22
      cidr_ip: 0.0.0.0/0
      rule_desc: allow all on ports 80, 443 & 22
    region: "{{ ec2_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: "{{ instance_name }}"
  when: ec2_os_type == "linux"

- name: Create security group {{ instance_name }} (HTTP, HTTPS, WinRM and RDP)
  amazon.aws.ec2_group:
    name: "{{ instance_name }}"
    description: HTTP, HTTPS, WinRM and RDP
    state: present
    rules:
    - proto: tcp
      ports:
        - 80
        - 443
        - 3389
        - 5986
      cidr_ip: 0.0.0.0/0
      rule_desc: allow all on ports 80, 443 & 5986
    region: "{{ ec2_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: "{{ instance_name }}"
  when: ec2_os_type == "windows"

- name: Import SSH Key
  amazon.aws.ec2_key:
    name: "{{ instance_name }}"
    key_material: "{{ lookup('file', ec2_key_pair ) }}"

- name: Find AMI with filter "{{ ec2_image_name }}"
  amazon.aws.ec2_ami_info:
    filters:
      name: "{{ ec2_image_name }}"
    region: "{{ ec2_region }}"
  register: ami_find
  when: not ec2_ami_id

- name: Create EC2 {{ ec2_os_type }} instance {{ instance_name }} - this can take a minute
  community.aws.ec2_instance:
    image_id: "{{ ami_find.images[-1].image_id | default('') }}"
    instance_type: "{{ instance_flavor }}"
    security_group: "{{ instance_name }}"
    name: "{{ instance_name }}"
    key_name: "{{ instance_name }}"
    region: "{{ ec2_region }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    network:
      assign_public_ip: true
    tags:
      Name: "{{ instance_name }}"
  register: ec2

- name: Obtain Administrator password for {{ instance_name }}
  community.aws.ec2_win_password:
    instance_id: "{{ item.instance_id }}"
    region: "{{ ec2_region }}"
    key_file: "{{ ec2_key_file }}"
    wait: yes
    wait_timeout: 45
  with_items: "{{ ec2.instances }}"
  register: ec2_windows_password
  no_log: true
  when: ec2_os_type == "windows"

- name: Print Administrator password
  ansible.builtin.debug:
    msg: "Windows Local Administrator password is: {{ (ec2_windows_password.results | first).win_password }}"
  when: ec2_os_type == "windows"

- name: Add host to an in_memory inventory
  ansible.builtin.add_host:
    name: "{{ instance_name }}"
    ansible_host: "{{ instance_name }}.{{ dns_suffix }}.ansible-labs.de"
    ansible_user: ec2-user
    ansible_ssh_private_key_file: "{{ ec2_key_file }}"
    groups:
    - "{{ instance_group | default ('all_hosts') }}"

- name: update DNS record
  include_role:
    name: nsupdate
  vars:
    ipaddress: "{{ ec2.instances[0].public_ip_address }}"
    shortname: "{{ instance_name }}"
    keyfile: "{{ dns_keyfile }}"
    suffix: "{{ dns_suffix }}"
    mode: update
  when: dns_update | bool
